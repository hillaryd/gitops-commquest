name: Build Commquest Custom ERPNext Image
on:
  push:
    branches:
      - main 
    paths:
      - 'builds/**'       
      - 'ci/apps.json'    
      - 'ci/build.env'    
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs:
      image_tag_suffix:
        description: 'Optional suffix for the image tag (e.g., -beta, -rc1)'
        required: false
        type: string
      # Keeping original inputs for potential override, though build.env is primary
      image_name:
        description: 'Image name (e.g., custom-erpnext-commquest)'
        required: false
        type: string
      frappe_repo:
        description: Frappe repo
        type: string
        default: 'https://github.com/frappe/frappe'
      frappe_version:
        description: Frappe branch
        type: string
        default: 'version-15'
      py_version:
        description: Python version
        type: string
        default: '3.11.9' 
      nodejs_version:
        description: NodeJS version
        type: string
        default: '20.13.1' 

env:
  # Default values, can be overridden by ci/build.env or workflow inputs
  REGISTRY: ghcr.io
  PROJECT_NAMESPACE: ${{ github.repository_owner }} # Uses your GitHub username/org
  IMAGE_NAME_PREFIX: commquest # Specific to this customer repo
  IMAGE_BASE_NAME: custom-erpnext # Base name for the image

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Version Tag & Load Build Variables
        id: vars
        run: |
          # --- Part 1: Load from ci/build.env into shell variables first ---
          # And set them to GITHUB_ENV so subsequent STEPS can use them as env.VAR
          # Initialize with empty strings or defaults if ci/build.env might be missing fields
          BUILD_ENV_PY_VERSION=""
          BUILD_ENV_NODEJS_VERSION=""
          BUILD_ENV_FRAPPE_REPO=""
          BUILD_ENV_FRAPPE_VERSION=""
          # ... add others from build.env ...

          if [ -f ./ci/build.env ]; then
            echo "Sourcing ci/build.env..."
            # Source into current shell and also into GITHUB_ENV
            # Using a loop to handle potential spaces in values and ensure clean export
            while IFS='=' read -r key value; do
              # Skip comments and empty lines
              [[ "$key" =~ ^\s*# || -z "$key" ]] && continue
              # Trim whitespace from key and value (optional but good practice)
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | xargs)
              
              echo "Read from build.env: $key=$value"
              echo "$key=$value" >> $GITHUB_ENV # For subsequent steps
              
              # Also make available to current script via explicit shell vars
              case "$key" in
                PY_VERSION) BUILD_ENV_PY_VERSION="$value" ;;
                NODEJS_VERSION) BUILD_ENV_NODEJS_VERSION="$value" ;;
                FRAPPE_REPO) BUILD_ENV_FRAPPE_REPO="$value" ;;
                FRAPPE_VERSION) BUILD_ENV_FRAPPE_VERSION="$value" ;;
                # ... add other vars from build.env you need to make decisions on ...
              esac
            done < <(grep -v '^#' ./ci/build.env | grep -v '^\s*$') # Process lines from build.env
          fi

          # --- Part 2: Determine FINAL values using inputs as overrides ---
          # Use shell parameter expansion for default values
          FINAL_PY_VERSION="${{ inputs.py_version }}"
          [ -z "$FINAL_PY_VERSION" ] && FINAL_PY_VERSION="$BUILD_ENV_PY_VERSION"
          # Add a hardcoded default if both input and build.env are empty (optional)
          [ -z "$FINAL_PY_VERSION" ] && FINAL_PY_VERSION="3.11.9" # Example hardcoded default

          FINAL_NODEJS_VERSION="${{ inputs.nodejs_version }}"
          [ -z "$FINAL_NODEJS_VERSION" ] && FINAL_NODEJS_VERSION="$BUILD_ENV_NODEJS_VERSION"
          [ -z "$FINAL_NODEJS_VERSION" ] && FINAL_NODEJS_VERSION="20.13.1"

          FINAL_FRAPPE_REPO="${{ inputs.frappe_repo }}"
          [ -z "$FINAL_FRAPPE_REPO" ] && FINAL_FRAPPE_REPO="$BUILD_ENV_FRAPPE_REPO"
          [ -z "$FINAL_FRAPPE_REPO" ] && FINAL_FRAPPE_REPO="https://github.com/frappe/frappe"

          FINAL_FRAPPE_VERSION="${{ inputs.frappe_version }}"
          [ -z "$FINAL_FRAPPE_VERSION" ] && FINAL_FRAPPE_VERSION="$BUILD_ENV_FRAPPE_VERSION"
          [ -z "$FINAL_FRAPPE_VERSION" ] && FINAL_FRAPPE_VERSION="version-15"
          
          # --- Part 3: Echo FINAL values to GITHUB_ENV so the build step can use env.VAR_FINAL ---
          echo "PY_VERSION_FINAL=$FINAL_PY_VERSION" >> $GITHUB_ENV
          echo "NODEJS_VERSION_FINAL=$FINAL_NODEJS_VERSION" >> $GITHUB_ENV
          echo "FRAPPE_REPO_FINAL=$FINAL_FRAPPE_REPO" >> $GITHUB_ENV
          echo "FRAPPE_VERSION_FINAL=$FINAL_FRAPPE_VERSION" >> $GITHUB_ENV

          # --- Part 4: Other variables ---
          IMAGE_TAG_VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)${{ inputs.image_tag_suffix }}
          echo "IMAGE_TAG=$IMAGE_TAG_VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

          if [ ! -f ./ci/apps.json ]; then
            echo "Error: ci/apps.json not found!"
            exit 1
          fi
          echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV
          APPS_HASH=$(sha256sum ./ci/apps.json | cut -d ' ' -f 1)
          echo "APPS_HASH=$APPS_HASH" >> $GITHUB_ENV
          
          # Construct final image name (ensure IMAGE_NAME_PREFIX and IMAGE_BASE_NAME are in GITHUB_ENV from build.env or set globally)
          # Assuming IMAGE_NAME_PREFIX and IMAGE_BASE_NAME are loaded into shell vars BUILD_ENV_IMAGE_NAME_PREFIX etc.
          # Or, if they are simple enough to be directly in GITHUB_ENV from the build.env sourcing:
          FINAL_IMAGE_NAME_CONSTRUCTED="${{ env.IMAGE_NAME_PREFIX || 'defaultprefix' }}-${{ inputs.image_name || env.IMAGE_BASE_NAME || 'defaultbasename' }}"
          echo "FINAL_IMAGE_NAME=$FINAL_IMAGE_NAME_CONSTRUCTED" >> $GITHUB_ENV


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN has permissions to push to ghcr.io for your repo
      
      #vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
      # PUT THE DEBUG STEP RIGHT HERE  # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      #vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
      - name: Debug Environment Variables
        run: |
          echo "Debug Info (immediately before Docker build):"
          echo "--------------------------------------------------"
          echo "Workflow Inputs:"
          echo "  inputs.image_tag_suffix: ${{ inputs.image_tag_suffix }}"
          echo "  inputs.image_name: ${{ inputs.image_name }}"
          echo "  inputs.py_version: ${{ inputs.py_version }}"
          echo "  inputs.nodejs_version: ${{ inputs.nodejs_version }}"
          echo "  inputs.frappe_repo: ${{ inputs.frappe_repo }}"
          echo "  inputs.frappe_version: ${{ inputs.frappe_version }}"
          echo ""
          echo "Variables from ci/build.env (potentially):"
          echo "  env.REGISTRY (from build.env or global): ${{ env.REGISTRY }}"
          echo "  env.PROJECT_NAMESPACE (from build.env or global): ${{ env.PROJECT_NAMESPACE }}"
          echo "  env.IMAGE_NAME_PREFIX (from build.env or global): ${{ env.IMAGE_NAME_PREFIX }}"
          echo "  env.IMAGE_BASE_NAME (from build.env or global): ${{ env.IMAGE_BASE_NAME }}"
          echo "  env.FRAPPE_REPO (from build.env): ${{ env.FRAPPE_REPO }}"
          echo "  env.FRAPPE_VERSION (from build.env): ${{ env.FRAPPE_VERSION }}"
          echo "  env.PY_VERSION (from build.env): ${{ env.PY_VERSION }}"
          echo "  env.NODEJS_VERSION (from build.env): ${{ env.NODEJS_VERSION }}"
          echo ""
          echo "Final effective variables passed to Docker build:"
          echo "  env.FRAPPE_REPO_FINAL: ${{ env.FRAPPE_REPO_FINAL }}"
          echo "  env.FRAPPE_VERSION_FINAL: ${{ env.FRAPPE_VERSION_FINAL }}"
          echo "  env.PY_VERSION_FINAL: ${{ env.PY_VERSION_FINAL }}"        # <<< CHECK THIS VALUE
          echo "  env.NODEJS_VERSION_FINAL: ${{ env.NODEJS_VERSION_FINAL }}" # <<< CHECK THIS VALUE
          echo "  env.APPS_JSON_BASE64 (first 50 chars): $(echo ${{ env.APPS_JSON_BASE64 }} | cut -c 1-50)"
          echo ""
          echo "Image and Tagging variables:"
          echo "  env.FINAL_IMAGE_NAME: ${{ env.FINAL_IMAGE_NAME }}"
          echo "  env.IMAGE_TAG: ${{ env.IMAGE_TAG }}"
          echo "  env.BUILD_DATE: ${{ env.BUILD_DATE }}"
          echo "  env.COMMIT_SHA: ${{ env.COMMIT_SHA }}"
          echo "  env.APPS_HASH: ${{ env.APPS_HASH }}"
          echo "--------------------------------------------------"
          # Optionally, print all env vars if still unsure:
          # echo "--- All Environment Variables ---"
          # env | sort
          # echo "--- End Environment Variables ---"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./builds # Context is your local 'builds' directory
          file: ./builds/Containerfile # Path to your local, modified Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAMESPACE }}/${{ env.FINAL_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=${{ env.APPS_HASH }}-${{ env.FINAL_IMAGE_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.APPS_HASH }}-${{ env.FINAL_IMAGE_NAME }}
          # Pass the PAT secret to the Docker build
          secrets: |
            gh_pat_secret_mount_point=${{ secrets.GH_PAT_PRIVATE_APPS }} # Make sure GH_PAT_PRIVATE_APPS is a repo secret
          build-args: |
            "FRAPPE_PATH=${{ env.FRAPPE_REPO_FINAL }}"
            "FRAPPE_BRANCH=${{ env.FRAPPE_VERSION_FINAL }}"
            "PYTHON_VERSION=${{ env.PY_VERSION_FINAL }}"
            "NODE_VERSION=${{ env.NODEJS_VERSION_FINAL }}"
            "APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}"
            "CACHE_BUST=${{ env.BUILD_DATE }}" # For cache busting if needed
          labels: |
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ env.COMMIT_SHA }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}