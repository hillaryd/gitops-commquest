name: Build Commquest Custom ERPNext Image

on:
  push:
    branches:
      - main 
    paths:
      - 'builds/**'       
      - 'ci/apps.json'    
      - 'ci/build.env'    
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs:
      image_tag_suffix:
        description: 'Optional suffix for the image tag (e.g., -beta, -rc1)'
        required: false
        type: string
      # Keeping original inputs for potential override, though build.env is primary
      image_name:
        description: 'Image name (e.g., custom-erpnext-commquest)'
        required: false
        type: string
      frappe_repo:
        description: Frappe repo
        type: string
        default: 'https://github.com/frappe/frappe'
      frappe_version:
        description: Frappe branch
        type: string
        default: 'version-15'
      py_version:
        description: Python version
        type: string
        default: '3.11.9' 
      nodejs_version:
        description: NodeJS version
        type: string
        default: '20.13.1' 

env:
  # Default values, can be overridden by ci/build.env or workflow inputs
  REGISTRY: ghcr.io
  PROJECT_NAMESPACE: ${{ github.repository_owner }} # Uses your GitHub username/org
  IMAGE_NAME_PREFIX: commquest # Specific to this customer repo
  IMAGE_BASE_NAME: custom-erpnext # Base name for the image

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Version Tag & Load Build Variables
        id: vars
        run: |
          IMAGE_TAG_VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)${{ inputs.image_tag_suffix }}
          echo "IMAGE_TAG=$IMAGE_TAG_VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          
          # Load from ci/build.env, allowing workflow inputs to override if provided
          # This sets them as environment variables for subsequent steps
          if [ -f ./ci/build.env ]; then
            echo "Sourcing ci/build.env..."
            # Filter out comments and empty lines, then export
            grep -v '^#' ./ci/build.env | grep -v '^\s*$' | while IFS= read -r line; do echo "$line" >> $GITHUB_ENV; done
          fi

          # Set Python and NodeJS versions from inputs if provided, else use env (from build.env or default)
          echo "PY_VERSION_FINAL=${{ inputs.py_version || env.PY_VERSION }}" >> $GITHUB_ENV
          echo "NODEJS_VERSION_FINAL=${{ inputs.nodejs_version || env.NODEJS_VERSION }}" >> $GITHUB_ENV
          echo "FRAPPE_REPO_FINAL=${{ inputs.frappe_repo || env.FRAPPE_REPO }}" >> $GITHUB_ENV
          echo "FRAPPE_VERSION_FINAL=${{ inputs.frappe_version || env.FRAPPE_VERSION }}" >> $GITHUB_ENV

          # Prepare apps.json
          if [ ! -f ./ci/apps.json ]; then
            echo "Error: ci/apps.json not found!"
            exit 1
          fi
          echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV
          APPS_HASH=$(sha256sum ./ci/apps.json | cut -d ' ' -f 1)
          echo "APPS_HASH=$APPS_HASH" >> $GITHUB_ENV

          # Construct final image name
          FINAL_IMAGE_NAME="${{ env.IMAGE_NAME_PREFIX }}-${{ inputs.image_name || env.IMAGE_BASE_NAME }}"
          echo "FINAL_IMAGE_NAME=$FINAL_IMAGE_NAME" >> $GITHUB_ENV


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN has permissions to push to ghcr.io for your repo

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./builds # Context is your local 'builds' directory
          file: ./builds/Containerfile # Path to your local, modified Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_NAMESPACE }}/${{ env.FINAL_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=${{ env.APPS_HASH }}-${{ env.FINAL_IMAGE_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.APPS_HASH }}-${{ env.FINAL_IMAGE_NAME }}
          # Pass the PAT secret to the Docker build
          secrets: |
            gh_pat_secret_mount_point=${{ secrets.GH_PAT_PRIVATE_APPS }} # Make sure GH_PAT_PRIVATE_APPS is a repo secret
          build-args: |
            "FRAPPE_PATH=${{ env.FRAPPE_REPO_FINAL }}"
            "FRAPPE_BRANCH=${{ env.FRAPPE_VERSION_FINAL }}"
            "PYTHON_VERSION=${{ env.PY_VERSION_FINAL }}"
            "NODE_VERSION=${{ env.NODEJS_VERSION_FINAL }}"
            "APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}"
            "CACHE_BUST=${{ env.BUILD_DATE }}" # For cache busting if needed
          labels: |
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ env.COMMIT_SHA }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}