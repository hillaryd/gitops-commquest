name: Build Commquest Custom ERPNext Image

on:
  push:
    branches:
      - main 
    paths:
      - 'builds/**'       
      - 'ci/apps.json'    
      - 'ci/build.env'    
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs:
      image_tag_suffix:
        description: 'Optional suffix for the image tag (e.g., -beta, -rc1)'
        required: false
        type: string
        default: ''
      image_name:
        description: 'Override image name'
        required: false
        type: string
      frappe_repo:
        description: 'Frappe repository URL'
        type: string
        default: 'https://github.com/frappe/frappe'
      frappe_version:
        description: 'Frappe branch/version'
        type: string
        default: 'version-15'
      py_version:
        description: 'Python version'
        type: string
        default: '3.11.9' 
      nodejs_version:
        description: 'NodeJS version'
        type: string
        default: '20.19.2'

env:
  # Defaults - will be overridden by build.env
  REGISTRY: ghcr.io
  PROJECT_NAMESPACE: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Prerequisites
        run: |
          # Check required files exist
          if [ ! -f ./ci/apps.json ]; then
            echo "‚ùå Error: ci/apps.json not found!"
            exit 1
          fi
          
          if [ ! -f ./builds/Containerfile ]; then
            echo "‚ùå Error: builds/Containerfile not found!"
            exit 1
          fi
          
          echo "‚úÖ Prerequisites validated"

      - name: Load Build Configuration
        id: config
        run: |
          set -e
          
          # Initialize with defaults
          REGISTRY="ghcr.io"
          PROJECT_NAMESPACE="${{ github.repository_owner }}"
          IMAGE_NAME_PREFIX=""
          IMAGE_BASE_NAME="custom-erpnext"
          PY_VERSION="${{ inputs.py_version || '3.11.9' }}"
          NODEJS_VERSION="${{ inputs.nodejs_version || '20.19.2' }}"
          FRAPPE_REPO="${{ inputs.frappe_repo || 'https://github.com/frappe/frappe' }}"
          FRAPPE_VERSION="${{ inputs.frappe_version || 'version-15' }}"
          
          # Load from build.env if it exists
          if [ -f ./ci/build.env ]; then
            echo "üìã Loading configuration from ci/build.env"
            while IFS='=' read -r key value; do
              # Skip comments and empty lines
              [[ "$key" =~ ^\s*# || -z "$key" ]] && continue
              # Trim whitespace
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | xargs)
              
              echo "Loading: $key=$value"
              
              case "$key" in
                REGISTRY) REGISTRY="$value" ;;
                PROJECT_NAMESPACE) PROJECT_NAMESPACE="$value" ;;
                IMAGE_NAME_PREFIX) IMAGE_NAME_PREFIX="$value" ;;
                IMAGE_BASE_NAME) IMAGE_BASE_NAME="$value" ;;
                PY_VERSION) [ -z "${{ inputs.py_version }}" ] && PY_VERSION="$value" ;;
                NODEJS_VERSION) [ -z "${{ inputs.nodejs_version }}" ] && NODEJS_VERSION="$value" ;;
                FRAPPE_REPO) [ -z "${{ inputs.frappe_repo }}" ] && FRAPPE_REPO="$value" ;;
                FRAPPE_VERSION) [ -z "${{ inputs.frappe_version }}" ] && FRAPPE_VERSION="$value" ;;
              esac
            done < <(grep -v '^#' ./ci/build.env | grep -v '^\s*$')
          fi
          
          # Construct customer-specific image name
          if [ -n "${{ inputs.image_name }}" ]; then
            IMAGE_NAME="${{ inputs.image_name }}"
          else
            # Build name: prefix-basename (e.g., commquest-custom-erpnext)
            if [ -n "${IMAGE_NAME_PREFIX}" ]; then
              IMAGE_NAME="${IMAGE_NAME_PREFIX}-${IMAGE_BASE_NAME}"
            else
              IMAGE_NAME="${IMAGE_BASE_NAME}"
            fi
          fi
          
          # Generate version tag
          TIMESTAMP=$(date +'%Y%m%d-%H%M')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG_SUFFIX="${{ inputs.image_tag_suffix || '' }}"
          IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}${TAG_SUFFIX}"
          
          # Set all outputs
          echo "REGISTRY=${REGISTRY}" >> $GITHUB_OUTPUT
          echo "PROJECT_NAMESPACE=${PROJECT_NAMESPACE}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME_PREFIX=${IMAGE_NAME_PREFIX}" >> $GITHUB_OUTPUT
          echo "IMAGE_BASE_NAME=${IMAGE_BASE_NAME}" >> $GITHUB_OUTPUT
          echo "PY_VERSION=${PY_VERSION}" >> $GITHUB_OUTPUT
          echo "NODEJS_VERSION=${NODEJS_VERSION}" >> $GITHUB_OUTPUT  
          echo "FRAPPE_REPO=${FRAPPE_REPO}" >> $GITHUB_OUTPUT
          echo "FRAPPE_VERSION=${FRAPPE_VERSION}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          
          # Process apps.json
          APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)
          APPS_HASH=$(sha256sum ./ci/apps.json | cut -d ' ' -f 1 | cut -c1-8)
          echo "APPS_JSON_BASE64=${APPS_JSON_BASE64}" >> $GITHUB_OUTPUT
          echo "APPS_HASH=${APPS_HASH}" >> $GITHUB_OUTPUT
          
          # Final image reference
          FULL_IMAGE_NAME="${REGISTRY}/${PROJECT_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}"
          LATEST_IMAGE_NAME="${REGISTRY}/${PROJECT_NAMESPACE}/${IMAGE_NAME}:latest"
          echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "LATEST_IMAGE_NAME=${LATEST_IMAGE_NAME}" >> $GITHUB_OUTPUT
          
          echo "üèóÔ∏è Build Configuration:"
          echo "  Registry: ${REGISTRY}"
          echo "  Namespace: ${PROJECT_NAMESPACE}" 
          echo "  Customer: ${IMAGE_NAME_PREFIX}"
          echo "  Base Name: ${IMAGE_BASE_NAME}"
          echo "  Full Image Name: ${IMAGE_NAME}"
          echo "  Python: ${PY_VERSION}"
          echo "  Node.js: ${NODEJS_VERSION}"
          echo "  Frappe: ${FRAPPE_VERSION} (${FRAPPE_REPO})"
          echo "  Final Image: ${FULL_IMAGE_NAME}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.config.outputs.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./builds
          file: ./builds/Containerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.config.outputs.FULL_IMAGE_NAME }}
            ${{ steps.config.outputs.LATEST_IMAGE_NAME }}
          cache-from: type=gha,scope=${{ steps.config.outputs.IMAGE_NAME }}-${{ steps.config.outputs.APPS_HASH }}
          cache-to: type=gha,mode=max,scope=${{ steps.config.outputs.IMAGE_NAME }}-${{ steps.config.outputs.APPS_HASH }}
          secrets: |
            gh_pat_secret_mount_point=${{ secrets.GH_PAT_PRIVATE_APPS }}
          build-args: |
            FRAPPE_PATH=${{ steps.config.outputs.FRAPPE_REPO }}
            FRAPPE_BRANCH=${{ steps.config.outputs.FRAPPE_VERSION }}
            PYTHON_VERSION=${{ steps.config.outputs.PY_VERSION }}
            NODE_VERSION=${{ steps.config.outputs.NODEJS_VERSION }}
            APPS_JSON_BASE64=${{ steps.config.outputs.APPS_JSON_BASE64 }}
          labels: |
            org.opencontainers.image.title=${{ steps.config.outputs.IMAGE_NAME }}
            org.opencontainers.image.description=Custom ERPNext image for ${{ steps.config.outputs.IMAGE_NAME_PREFIX }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.config.outputs.IMAGE_TAG }}
            org.opencontainers.image.created=${{ steps.config.outputs.BUILD_DATE }}
            org.opencontainers.image.revision=${{ steps.config.outputs.COMMIT_SHA }}
            org.opencontainers.image.licenses=MIT

      - name: Build Summary
        if: always()
        run: |
          echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Customer** | ${{ steps.config.outputs.IMAGE_NAME_PREFIX || 'default' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image** | \`${{ steps.config.outputs.FULL_IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Python** | ${{ steps.config.outputs.PY_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Node.js** | ${{ steps.config.outputs.NODEJS_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Frappe** | ${{ steps.config.outputs.FRAPPE_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Apps Hash** | ${{ steps.config.outputs.APPS_HASH }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ steps.config.outputs.COMMIT_SHA }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if build was successful
          BUILD_STATUS="${{ job.status }}"
          if [ "$BUILD_STATUS" == "success" ]; then
            echo "‚úÖ **Status**: Build completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì¶ Pull Command" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ steps.config.outputs.FULL_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status**: Build failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the build logs above for details." >> $GITHUB_STEP_SUMMARY
          fi